기존 프로젝트에 추가할 프로젝트의 PRD 를 만들어 줘.  
나중에 합칠거야
라이브러리는 개인 상용화 가능한 오픈소스내에서 만들어 줘

현재까진 
{
  "name": "the-canvas",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.919.0",
    "@aws-sdk/s3-request-presigner": "^3.919.0",
    "@ffmpeg/ffmpeg": "^0.12.15",
    "@ffmpeg/util": "^0.12.2",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.15",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@univerjs/core": "^0.10.13",
    "@univerjs/design": "^0.10.13",
    "@univerjs/docs": "^0.10.13",
    "@univerjs/docs-ui": "^0.10.13",
    "@univerjs/engine-formula": "^0.10.13",
    "@univerjs/engine-render": "^0.10.13",
    "@univerjs/preset-sheets-core": "^0.10.13",
    "@univerjs/presets": "^0.10.13",
    "@univerjs/sheets": "^0.10.13",
    "@univerjs/sheets-formula": "^0.10.13",
    "@univerjs/sheets-ui": "^0.10.13",
    "@univerjs/ui": "^0.10.13",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "fabric": "5.3.0-browser",
    "lodash.debounce": "^4.0.8",
    "lucide-react": "^0.399.0",
    "material-colors": "^1.2.6",
    "next": "^15.1.6",
    "next-themes": "^0.3.0",
    "react": "^19.0.0",
    "react-color": "^2.19.3",
    "react-dom": "^19.0.0",
    "react-icons": "^5.2.1",
    "react-use": "^17.5.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7",
    "use-file-picker": "^2.1.4",
    "uuidv4": "^6.2.13",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "@types/fabric": "5.3.0",
    "@types/lodash.debounce": "^4.0.9",
    "@types/material-colors": "^1.2.3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-color": "^3.0.12",
    "@types/react-dom": "^19",
    "eslint": "^8",
    "eslint-config-next": "^15.1.6",
    "jsdom": "^27.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
의 라이브러리를 썼어, 추가는 당엲 가능하고 변경은 기존 프로젝트도 고려해야 해
저장소는 AWS S3를 사용하고 있어, ffmpeg 로 영상 합치면 좋을듯 해

<프로젝트 설명>
1. 이미지와 동영상 생성기
   1) 이미지 생성기 : 
       나노바나나 이미지 만들기 ( 제미나이 flash 2.5 이미지 생성 )
       구글 ai studio 에서 이미지 만드는 샘플 웹앱과 유사하게 만들어 이미지 생성
   2) 동영상 생성기
       나노바나나에서 생성한 이미지가 1장이나 2장이나 필요한데
       숏츠를 위한 생성 : 동영상 시작용/끝용 이미지를 다르게 넣으면 
       게임을 위한 생성 : 동영상 시작용/끝용 이미지를 같게 넣으면

--> 더 세밀한 내용은 문서 첨부 ---


2. 숏츠 생성기 
   Mp4 가 여러개 있는데 canva 의 동영상 편집기처럼 연결시켜서 하나의 영상으로 만들수 있어야 함
   1) 영상간 여러가지 트윈 기능 삽입 가능( 영상 페이드 전환등 )한 툴(UI)
   2) "fabric": "5.3.0-browser", 로 여러 이미지, 글자들을 캔버스 위에 그리고 
      그 fabric 요소들의 트윈을 편집할 수 있는 툴(UI)
   3) 자막 생성기 ( 자막 읽어주기, 다국어가 가능해야 함 ), 효과음 삽입기, 배경음악 삽입기

   영상위에 fabric의 트윈을 편집한 canvas 화면이 위치하고 
   영상 프레임사이에 음성 추가하기/배경음악 바꾸기 등을 하고 
   마지막에 생성 누르면 
   영상들과 canvas(fabric들이 들어간)과 자막, 음성, 배경음악이 합쳐진 1개의 영상이 나와야 해
   편집하면서 마지막 생성 전에 시간에 따라 플레이를 해 볼수 있어야 해
  

--------- 니가 참조했으면 하는 내용들 -------------------
# 🎬 AI 캐릭터 숏츠 제작 시스템 - 완벽 가이드

## 📋 목차
1. [개요](#개요)
2. [시스템 아키텍처](#시스템-아키텍처)
3. [Backend 구현](#backend-구현)
4. [Frontend 구현](#frontend-구현)
5. [ComfyUI 설정](#comfyui-설정)
6. [설치 및 실행](#설치-및-실행)
7. [사용 가이드](#사용-가이드)
8. [트러블슈팅](#트러블슈팅)

## 개요

Google의 Gemini 2.5 Flash Image (나노 바나나)와 Stable Video Diffusion을 활용하여 일관된 캐릭터로 숏츠 영상을 제작하는 시스템입니다.

### 핵심 기능
- ✨ **캐릭터 일관성**: 동일 캐릭터 유지
- 👗 **부분 교체**: 의상, 헤어, 소품 변경
- 🎭 **포즈 변경**: 참조 이미지로 포즈 적용
- 🎬 **비디오 생성**: 이미지→비디오 변환
- 🔄 **루프 애니메이션**: 게임 캐릭터용
- 🗣️ **음성 삽입**: TTS 자막 음성

## 시스템 아키텍처
```
┌─────────────────┐
│  Next.js 15 UI  │
└────────┬────────┘
         ↓
┌─────────────────┐
│  FastAPI Server │
└────────┬────────┘
         ├─────────────┐
         ↓             ↓
┌──────────────┐  ┌──────────────┐
│ Nano Banana  │  │  ComfyUI +   │
│   (Gemini)   │  │     SVD      │
└──────────────┘  └──────────────┘
```

## Backend 구현

### 메인 서버 (main.py)
```python
# backend/main.py
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import google.generativeai as genai
import os
import base64
import json
import asyncio
from pathlib import Path
import uuid

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Gemini 설정
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
nano_banana = genai.GenerativeModel("gemini-2-5-flash-image")

class CharacterConfig(BaseModel):
    """캐릭터 설정"""
    name: str
    base_description: str
    reference_image: Optional[str] = None  # base64 이미지
    
class SceneRequest(BaseModel):
    """장면 생성 요청"""
    character: CharacterConfig
    scenes: List[dict]  # 각 장면 정보
    video_type: str = "story"  # "story" or "loop"
    fps: int = 8
    frames: int = 25
    
class CharacterSession:
    """캐릭터 일관성 유지를 위한 세션"""
    def __init__(self, character: CharacterConfig):
        self.character = character
        self.reference_images = []
        self.generated_images = []
        
    async def generate_consistent_image(self, 
        action: str,
        angle: Optional[str] = None,
        outfit: Optional[str] = None,
        props: Optional[str] = None,
        background: Optional[str] = None,
        pose_reference: Optional[str] = None
    ):
        """일관된 캐릭터로 이미지 생성"""
        
        # 프롬프트 구성
        prompt_parts = []
        
        # 기본 캐릭터 설명
        prompt_parts.append(f"Character: {self.character.base_description}")
        
        # 동작
        if action:
            prompt_parts.append(f"Action: {action}")
        
        # 각도 변경
        if angle:
            prompt_parts.append(f"Camera angle: {angle}")
            
        # 의상 변경
        if outfit:
            prompt_parts.append(f"Wearing: {outfit}")
            
        # 소품 추가
        if props:
            prompt_parts.append(f"Holding/Using: {props}")
            
        # 배경 설정
        if background:
            prompt_parts.append(f"Background: {background}")
        else:
            prompt_parts.append("Clean white background for easy extraction")
            
        # 일관성 유지 지시
        prompt_parts.append("IMPORTANT: Maintain exact same character appearance and features")
        
        full_prompt = "\n".join(prompt_parts)
        
        # 이미지 생성
        contents = [full_prompt]
        
        # 참조 이미지 추가 (캐릭터 일관성)
        if self.character.reference_image:
            contents.append(self._decode_base64_image(self.character.reference_image))
            
        # 포즈 참조 이미지
        if pose_reference:
            contents.append(self._decode_base64_image(pose_reference))
            contents.append("Use this pose reference but keep the character's appearance")
            
        # 이전 생성 이미지도 참조 (일관성 강화)
        if self.generated_images:
            contents.append(self.generated_images[-1])
            contents.append("Keep this exact character")
            
        response = nano_banana.generate_content(contents)
        
        # 결과 이미지 저장
        for part in response.candidates[0].content.parts:
            if part.inline_data:
                image_data = part.inline_data.data
                self.generated_images.append(image_data)
                return base64.b64encode(image_data).decode()
                
        return None
    
    def _decode_base64_image(self, base64_str):
        """Base64 이미지 디코딩"""
        from PIL import Image
        import io
        
        image_data = base64.b64decode(base64_str)
        return Image.open(io.BytesIO(image_data))

@app.post("/api/create-character-animation")
async def create_character_animation(request: SceneRequest):
    """캐릭터 애니메이션 생성 전체 파이프라인"""
    
    try:
        # 1. 캐릭터 세션 생성
        session = CharacterSession(request.character)
        
        # 2. 각 장면별 이미지 생성
        scene_images = []
        
        for i, scene in enumerate(request.scenes):
            print(f"장면 {i+1} 생성 중...")
            
            image_b64 = await session.generate_consistent_image(
                action=scene.get('action'),
                angle=scene.get('angle'),
                outfit=scene.get('outfit'),
                props=scene.get('props'),
                background=scene.get('background'),
                pose_reference=scene.get('pose_reference')
            )
            
            if image_b64:
                scene_images.append({
                    'scene_num': i + 1,
                    'image': image_b64,
                    'description': scene.get('action', '')
                })
        
        # 3. 비디오 타입에 따른 처리
        videos = []
        
        if request.video_type == "loop":
            # 게임 캐릭터 루프 애니메이션
            for i, scene_img in enumerate(scene_images):
                # 같은 이미지로 시작과 끝 설정 (루프)
                video_url = await generate_loop_animation(
                    start_image=scene_img['image'],
                    end_image=scene_img['image'],  # 같은 이미지
                    action=scene_img['description'],
                    fps=request.fps,
                    frames=request.frames
                )
                videos.append({
                    'scene': i + 1,
                    'video_url': video_url,
                    'type': 'loop'
                })
                
        else:  # story
            # 연속된 스토리 영상
            for i in range(len(scene_images) - 1):
                video_url = await generate_story_video(
                    start_image=scene_images[i]['image'],
                    end_image=scene_images[i + 1]['image'],
                    fps=request.fps,
                    frames=request.frames
                )
                videos.append({
                    'scene': f"{i+1} to {i+2}",
                    'video_url': video_url,
                    'type': 'transition'
                })
        
        # 4. 음성 생성 (옵션)
        audio_urls = []
        for scene in request.scenes:
            if scene.get('dialogue'):
                audio_url = await generate_audio(scene['dialogue'])
                audio_urls.append(audio_url)
        
        return {
            "success": True,
            "character_name": request.character.name,
            "images": scene_images,
            "videos": videos,
            "audio": audio_urls
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

async def generate_loop_animation(
    start_image: str, 
    end_image: str,
    action: str,
    fps: int,
    frames: int
) -> str:
    """루프 애니메이션 생성 (ComfyUI SVD)"""
    
    from comfyui_client import ComfyUIClient
    
    client = ComfyUIClient()
    
    # ComfyUI 워크플로우 실행
    workflow = create_loop_workflow(action, fps, frames)
    
    # 이미지 업로드
    start_path = await save_base64_image(start_image, "start")
    end_path = await save_base64_image(end_image, "end")
    
    await client.upload_image(start_path)
    await client.upload_image(end_path)
    
    # 워크플로우 실행
    prompt_id = await client.queue_prompt(workflow)
    video_path = await client.get_result(prompt_id)
    
    return f"http://localhost:8000/videos/{video_path}"

def create_loop_workflow(action: str, fps: int, frames: int):
    """루프 애니메이션용 ComfyUI 워크플로우"""
    return {
        "1": {
            "class_type": "LoadImage",
            "inputs": {"image": "start.png"}
        },
        "2": {
            "class_type": "SVDimg2vid",
            "inputs": {
                "image": ["1", 0],
                "video_frames": frames,
                "motion_bucket_id": 50,  # 작은 움직임
                "fps": fps,
                "augmentation_level": 0.1,
                "min_cfg": 1.0,
                "seed": 42,  # 일관성을 위해 고정
                "motion_prompt": f"Character performing: {action}, then returning to original pose"
            }
        },
        "3": {
            "class_type": "VideoLoop",  # 커스텀 노드
            "inputs": {
                "video": ["2", 0],
                "blend_frames": 5  # 부드러운 루프를 위한 블렌딩
            }
        },
        "4": {
            "class_type": "SaveVideo",
            "inputs": {
                "video": ["3", 0],
                "filename_prefix": "loop_animation"
            }
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### ComfyUI 클라이언트
```python
# backend/comfyui_client.py
import aiohttp
import asyncio
import json
import uuid
from pathlib import Path

class ComfyUIClient:
    def __init__(self, server_address="http://127.0.0.1:8188"):
        self.server_address = server_address
        self.client_id = str(uuid.uuid4())
    
    async def upload_image(self, image_path: Path):
        """이미지 업로드"""
        async with aiohttp.ClientSession() as session:
            with open(image_path, 'rb') as f:
                data = aiohttp.FormData()
                data.add_field('image', f, 
                              filename=image_path.name)
                
                async with session.post(
                    f"{self.server_address}/upload/image",
                    data=data
                ) as response:
                    return await response.json()
    
    async def queue_prompt(self, workflow: dict):
        """워크플로우 실행"""
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.server_address}/prompt",
                json={
                    "prompt": workflow,
                    "client_id": self.client_id
                }
            ) as response:
                result = await response.json()
                return result.get('prompt_id')
    
    async def get_result(self, prompt_id: str, timeout: int = 120):
        """결과 대기 및 반환"""
        async with aiohttp.ClientSession() as session:
            start_time = asyncio.get_event_loop().time()
            
            while asyncio.get_event_loop().time() - start_time < timeout:
                async with session.get(
                    f"{self.server_address}/history/{prompt_id}"
                ) as response:
                    history = await response.json()
                    
                    if prompt_id in history:
                        outputs = history[prompt_id].get('outputs', {})
                        for node_id, node_output in outputs.items():
                            if 'videos' in node_output:
                                video = node_output['videos'][0]
                                return video['filename']
                
                await asyncio.sleep(1)
            
            raise TimeoutError(f"Result not ready after {timeout} seconds")
```

## Frontend 구현

### 메인 페이지
```typescript
// app/page.tsx
'use client';

import { useState } from 'react';
import CharacterCreator from '@/components/CharacterCreator';
import SceneBuilder from '@/components/SceneBuilder';
import VideoPreview from '@/components/VideoPreview';
import { Character, Scene, GeneratedContent } from '@/types';

export default function ShortsCreator() {
  const [character, setCharacter] = useState<Character | null>(null);
  const [scenes, setScenes] = useState<Scene[]>([]);
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [loading, setLoading] = useState(false);
  const [videoType, setVideoType] = useState<'story' | 'loop'>('story');

  const handleGenerate = async () => {
    if (!character || scenes.length === 0) {
      alert('캐릭터와 최소 1개 이상의 장면이 필요합니다!');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/create-character-animation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          character,
          scenes,
          video_type: videoType,
          fps: 8,
          frames: 25
        })
      });

      const data = await response.json();
      setGeneratedContent(data);
    } catch (error) {
      console.error('생성 실패:', error);
      alert('생성 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50">
      <div className="container mx-auto p-8">
        <h1 className="text-4xl font-bold mb-8 text-center">
          🎬 AI 캐릭터 숏츠 제작기
        </h1>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* 왼쪽: 캐릭터 & 장면 설정 */}
          <div className="space-y-6">
            {/* 캐릭터 생성 */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-semibold mb-4">
                👤 캐릭터 만들기
              </h2>
              <CharacterCreator 
                onCharacterCreate={setCharacter}
                character={character}
              />
            </div>

            {/* 장면 빌더 */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-semibold mb-4">
                🎭 장면 구성하기
              </h2>
              
              {/* 비디오 타입 선택 */}
              <div className="mb-4 flex gap-4">
                <button
                  onClick={() => setVideoType('story')}
                  className={`px-4 py-2 rounded-lg ${
                    videoType === 'story' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-200'
                  }`}
                >
                  📖 스토리 모드
                </button>
                <button
                  onClick={() => setVideoType('loop')}
                  className={`px-4 py-2 rounded-lg ${
                    videoType === 'loop' 
                      ? 'bg-green-500 text-white' 
                      : 'bg-gray-200'
                  }`}
                >
                  🔄 루프 애니메이션
                </button>
              </div>

              <SceneBuilder 
                scenes={scenes}
                onScenesUpdate={setScenes}
                videoType={videoType}
              />
            </div>

            {/* 생성 버튼 */}
            <button
              onClick={handleGenerate}
              disabled={loading || !character || scenes.length === 0}
              className="w-full py-4 bg-gradient-to-r from-purple-500 to-pink-500 
                        text-white font-bold rounded-xl shadow-lg
                        disabled:opacity-50 disabled:cursor-not-allowed
                        hover:from-purple-600 hover:to-pink-600 transition"
            >
              {loading ? '🔄 생성 중...' : '🎬 숏츠 만들기'}
            </button>
          </div>

          {/* 오른쪽: 미리보기 */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-2xl font-semibold mb-4">
              📺 미리보기
            </h2>
            <VideoPreview content={generatedContent} loading={loading} />
          </div>
        </div>
      </div>
    </div>
  );
}
```

### 타입 정의
```typescript
// types/index.ts
export interface Character {
  name: string;
  base_description: string;
  reference_image?: string | null;
}

export interface Scene {
  action: string;
  angle?: string;
  outfit?: string;
  props?: string;
  background?: string;
  pose_reference?: string;
  dialogue?: string;
}

export interface GeneratedContent {
  success: boolean;
  character_name: string;
  images: Array<{
    scene_num: number;
    image: string;
    description: string;
  }>;
  videos: Array<{
    scene: string | number;
    video_url: string;
    type: 'loop' | 'transition';
  }>;
  audio?: string[];
}
```

## ComfyUI 설정

### 필수 커스텀 노드 설치
```bash
# ComfyUI 디렉토리로 이동
cd ComfyUI/custom_nodes

# 나노바나나 노드 (Gemini 2.5 Flash Image)
git clone https://github.com/ShmuelRonen/ComfyUI-NanoBanano.git

# SVD (Stable Video Diffusion) 노드
git clone https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite.git

# 비디오 루프 처리
git clone https://github.com/Fannovel16/ComfyUI-Video-Looping.git

# 프레임 보간
git clone https://github.com/Fannovel16/ComfyUI-Frame-Interpolation.git

# 각 노드의 의존성 설치
cd ComfyUI-NanoBanano && pip install -r requirements.txt && cd ..
cd ComfyUI-VideoHelperSuite && pip install -r requirements.txt && cd ..
```

### SVD 모델 다운로드
```bash
# SVD 모델 다운로드
cd ComfyUI/models/checkpoints

# Hugging Face에서 SVD 모델 다운로드
huggingface-cli download stabilityai/stable-video-diffusion-img2vid-xt \
  --local-dir ./svd_xt/
```

## 설치 및 실행

### 사전 요구사항

- Python 3.10+
- Node.js 18+
- CUDA (GPU 가속, 선택사항)
- 최소 16GB RAM
- 20GB+ 저장공간

### Step 1: 환경 설정
```bash
# 프로젝트 디렉토리 생성
mkdir character-shorts-creator
cd character-shorts-creator

# Python 가상환경 생성
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# Google API 키 설정
export GOOGLE_API_KEY="your-api-key-here"
```

### Step 2: Backend 설치
```bash
# Backend 디렉토리 생성
mkdir backend
cd backend

# 필요한 패키지 설치
pip install fastapi uvicorn google-generativeai aiohttp pillow gtts

# 환경변수 파일 생성
echo "GOOGLE_API_KEY=your-api-key" > .env
```

### Step 3: Frontend 설치
```bash
# Frontend 생성
npx create-next-app@latest frontend --typescript --tailwind --app
cd frontend

# 추가 패키지 설치
npm install axios react-dropzone
```

### Step 4: 서비스 실행
```bash
# Terminal 1: ComfyUI 실행
cd ComfyUI
python main.py --listen

# Terminal 2: Backend 실행
cd backend
python main.py

# Terminal 3: Frontend 실행
cd frontend
npm run dev
```

### Step 5: 접속
```
브라우저에서 http://localhost:3000 접속
```

## 사용 가이드

### 🎨 캐릭터 생성

1. **캐릭터 이름 입력**
   - 예: "나나", "철수", "미미"

2. **상세 설명 작성**
```
   분홍색 긴 머리, 큰 파란 눈, 밝은 미소
   파란색 원피스, 흰색 운동화
   10살 정도의 귀여운 소녀
```

3. **참조 이미지 업로드** (선택사항)
   - 캐릭터 일관성 향상
   - PNG/JPG 형식 지원

### 🎬 장면 구성

#### 스토리 모드 예시
```
장면 1: 걷기 / 정면 / 공원 배경
장면 2: 인사하기 / 측면 / "안녕하세요!"
장면 3: 뛰어가기 / 뒷모습 / 학교 배경
```

#### 루프 애니메이션 예시
```
공격 모션 / 정면 / 배경 없음
점프 동작 / 측면 / 간단한 배경
승리 포즈 / 3/4 각도 / 이펙트 추가
```

### 🎯 고급 기능

#### 의상 변경
```
기본: 파란 원피스
장면 2: 빨간 드레스로 변경
장면 3: 운동복으로 변경
```

#### 소품 추가
```
장면 1: 꽃다발 들기
장면 2: 우산 들기
장면 3: 가방 메기
```

#### 카메라 앵글
- 정면, 측면, 뒷모습
- 위에서, 아래에서
- 클로즈업, 전신샷
- 3/4 각도

### 💾 출력 형식

- **이미지**: PNG (1024x1024)
- **비디오**: MP4 (8fps, 25frames)
- **오디오**: MP3 (TTS 생성)

## 트러블슈팅

### 자주 발생하는 문제

#### 1. API 키 오류
```bash
# 해결방법
export GOOGLE_API_KEY="올바른-API-키"
# Google AI Studio에서 새 키 발급
```

#### 2. ComfyUI 연결 실패
```bash
# ComfyUI가 실행 중인지 확인
curl http://localhost:8188
# 포트 변경이 필요한 경우
python main.py --listen --port 8189
```

#### 3. 메모리 부족
```python
# frames 수 줄이기
frames: int = 15  # 25 -> 15
# 이미지 해상도 낮추기
resolution: str = "512x512"  # 1024x1024 -> 512x512
```

#### 4. 캐릭터 일관성 문제
- 참조 이미지 품질 향상
- 설명을 더 구체적으로 작성
- seed 값 고정 사용

### 성능 최적화

#### GPU 가속 활성화
```bash
# CUDA 설치 확인
nvidia-smi
# PyTorch GPU 버전 설치
pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
```

#### 배치 처리
```python
# 여러 장면 동시 생성
batch_size = 3
scenes = process_in_batches(scenes, batch_size)
```

#### 캐싱 활용
```python
# 생성된 이미지 캐싱
cache_dir = Path("cache")
if cache_dir.exists():
    return load_from_cache()
```

## 프로젝트 구조
```
character-shorts-creator/
├── backend/
│   ├── main.py                 # FastAPI 메인 서버
│   ├── comfyui_client.py       # ComfyUI 통신
│   ├── nano_banana.py          # Gemini API
│   └── requirements.txt
├── frontend/
│   ├── app/
│   │   └── page.tsx            # 메인 UI
│   ├── components/
│   │   ├── CharacterCreator.tsx
│   │   ├── SceneBuilder.tsx
│   │   └── VideoPreview.tsx
│   └── types/
│       └── index.ts
├── comfyui/
│   └── workflows/
│       ├── svd_loop.json       # 루프 워크플로우
│       └── svd_story.json      # 스토리 워크플로우
├── outputs/                    # 생성된 결과물
│   ├── images/
│   ├── videos/
│   └── audio/
└── README.md
```

## API 엔드포인트

### POST /api/create-character-animation
```json
{
  "character": {
    "name": "나나",
    "base_description": "분홍색 머리의 소녀",
    "reference_image": "base64..."
  },
  "scenes": [
    {
      "action": "걷기",
      "angle": "정면",
      "background": "공원"
    }
  ],
  "video_type": "story",
  "fps": 8,
  "frames": 25
}
```

### Response
```json
{
  "success": true,
  "character_name": "나나",
  "images": [...],
  "videos": [...],
  "audio": [...]
}
```

## 라이선스 및 크레딧

- Gemini 2.5 Flash Image (Google)
- Stable Video Diffusion (Stability AI)
- ComfyUI (comfyanonymous)
- Next.js (Vercel)
- FastAPI (Tiangolo)




   










